/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package src;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;

/**
 *
 * @author JÃ¡n
 */
public class ColorPicker extends javax.swing.JPanel {

    /**
     * Creates new form ColorPicker
     */
    private BufferedImage canvas;
    
    public ColorPicker() {
        initComponents();
        setBackground(Color.black);
        
    }

    protected void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        canvas = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
       
        for(int x = 0; x < getWidth(); x++)
        {
            for(int y = 0; y < getHeight(); y++)
            {
                double u = (double)x / (double)getWidth();
                double v = (double)y / (double)getHeight();
                double X = u;
                double Y = v;
                double Z = 1 - u - v;
//                X = X / (X + Y + Z);
//                Y = Y / (X + Y + Z);
//                Z = Z / (X + Y + Z);
                double xColor = (9.0 * u) / (6.0 * u - 16.0 * v + 12.0);
                double yColor = (4.0 * v) / (6.0 * u - 16.0 * v + 12.0);
                double zColor = (3.0 * u - 20.0 * v + 12.0) / (6.0 * u - 16.0 * v + 12.0);
                Color color = rgbFromXYZ(X, Y, Z);
                canvas.setRGB(x, getHeight() - 1 - y, color.getRGB());
            }
        }
        Graphics2D g2 = (Graphics2D) g;
        g2.drawImage(canvas, null, null);
    }
    
    public Color rgbFromXYZ(double x, double y, double z)
    {
        ColorSpace xyzSpace = ColorSpace.getInstance(ColorSpace.CS_sRGB);
        float[] xyzCoords = {(float)x,(float)y,(float)z};
        float[] rgbCoords = xyzSpace.fromCIEXYZ(xyzCoords);   
             
        Color result = new Color(rgbCoords[0], rgbCoords[1], rgbCoords[2]);
        double xColor = x;
        double yColor = y;
        double zColor = z;
        double[] coef = {0.625, 0.34, 0.275, 0.605, 0.15, 0.065, 0.3127, 0.3291};
        double XR = coef[0];
        double YR = coef[1];
        double ZR = 1 - XR - YR;
        
        double XG = coef[2];
        double YG = coef[3];
        double ZG = 1 - XG - YG;
        
        double XB = coef[4];
        double YB = coef[5];
        double ZB = 1 - XB - YB;
        
        double denominator = (XR * YG - XG * YR) * ZB + (XB * YR - XR * YB) * ZG + (XG * YB - XB * YG) * ZR;

        double red = ((xColor * YG - XG * yColor) * ZB + (XG * YB - XB * YG) * zColor + (XB * yColor - xColor * YB) * ZG) / denominator;
        double green = ((XR * yColor - xColor * YR) * ZB + (XB * YR - XR * YB) * zColor + (xColor * YB - XB * yColor) * ZR) / denominator;
        double blue = ((XR * YG - XG * YR) * zColor + (xColor * YR - XR * yColor) * ZG + (XG * yColor - xColor * YG) * ZR) / denominator;

        double rangeMax = 0.0000000001;
        if (red < 0) red = 0;
        if (red > 1) red = 1;
        if (red > rangeMax ) rangeMax = red;
        if (green < 0 ) green = 0;
        if (green > 1 ) green = 1;
        if (green > rangeMax ) rangeMax = green;
        if (blue < 0 ) blue = 0;
        if (blue > 1 ) blue = 1;
        if (blue > rangeMax ) rangeMax = blue;

        double R = 255 * ((red / rangeMax));
        double G = 255 * ((green / rangeMax));
        double B = 255 * ((blue / rangeMax));
            
        result = new Color((int)R,(int)G,(int)B);
        return result;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        double x = evt.getX() / (double)this.getWidth();
        double y = evt.getY() / (double)this.getHeight();
        Color resultColor = rgbFromXYZ(x, y, 1 - x - y);
    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
